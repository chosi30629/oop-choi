package object;


/**
 *  절차 지향 : 데이터를 여러 프로시저가 공유하는 방식
 *              - 처음에 쉬움
 *              - 시간이 흘러가면서 요구사항이 생길수록 데이터 구조가 복잡해지고 수정이 어려워짐
 *              - 요구사항 반영 시 데이터를 사용하는 코드 이곳저곳을 찾아 다니게 됨
 *
 *  객체 지향 : 데이터와 프로시저를 객체라는 단위로 묶는 방식
 *              - 객체의 데이터는 프로시저를 이용해서 접근
 *              - 다른 객체에서 데이터를 바로 접근하지 못함
 *              - 코드를 수정하기가 수월해짐
 *
 *  객체 : 객체의 핵심 -> 기능 제공
 *              - 객체는 제공하는 기능으로 정의(내부적으로 가진 필드(데이터)로 정의하지 않음
 *        예) 회원 객체
 *              - 암호 변경하기 기능, 차단 여부 확인 하기 기능
 *           소리 제어기
 *              - 소리 크기 증가하기 기능, 소리 크기 감소하기 기능
 *
 *  기능 명세 : 메서드(오퍼레이션)를 이용해서 기능 명세(이름, 파라미터, 결과로 구성)
 *
 *  객체와 객체 : 객체와 객체는 기능을 사용해서 연결
 *              - (기능 사용 = 메서드 호출)
 *
 *  메시지 : 객체와 객체 상호 작용(메시지를 주고 받는다고 표현)
 *              - 메서드를 호출하는 메시지, 리턴하는 메시지, 익셉션 메시지
 *
 *  getter, setter 만 정의되어 있는 클래스는 단순 데이터 접근 기능만 있고 부가적인 기능이 없으므로 객체보단 데이터에 가깝다. (데이터 클래스)
 *
 *  객체는 기능으로 정의한다.
 */
public class Object {

}
