package object;


/**
 *  캡슐화
 *      - 데이터와 + 관련 기능 묶기
 *      - 객체가 기능을 어떻게 구현했는지 외부에 감추는 것
 *        : 구현에 사용된 데이터의 상세 내용을 외부에 감춤
 *      - 정보 은닉(Information Hiding) 의미 포함
 *      - 외부에 영향 없이 객체 내부 구현 변경 가능
 *
 *  캡슐화를 하지 않으면
 *      - 요구사항의 변화가 데이터 구조 / 사용에 변화를 발생시킴
 *      - 데이터를 사용하는 여러 코드의 연쇄적인 수정 발생
 *        예) 장기 사용자에게 특정 기능 실행 권한을 연장(단 유효 일자는 그대로 유지)
 *            계정을 차단하면 모든 실행 권한 없음
 *            Date 를 LocalDateTime 으로 변경
 *
 *  캡슐화하면
 *      - 기능을 제공하고 외부에 구현 상세를 감춤
 *      - 내부 구현만 변경, 외부에서 기능을 구현하고 있는 코드는 변경하지 않아도 됨
 *      - 연쇄적인 변경 전파를 최소화
 *      - 요구사항의 변화가 내부 구현을 변경 -> 캡슐화된 기능을 사용하는 코드 영향 최소화
 *      - 캡슐화를 통해 기능을 사용하는 코드에 영향을 주지 않고(또는 최소화) 내부 구현을 변경할 수 있는 유연함, 수정하는 비용을 낮춤
 *
 *  캡슐화와 기능
 *      - 캡슐화 시도 -> 기능에 대한 이해(의도)를 높임
 *
 *  캡슐화를 위한 규칙
 *      - Tell, Don't Ask (데이터를 달라고 부탁하지말고 해달라고 하기)
 *        예) if (acc.getMembership() == REGULAR)
 *              - 데이터를 가져와서 판단
 *           if (acc.hasRegularPermission())
 *              - 데이터를 가졌는지 판단
 *
 *      - Demeter's Law (메소드 하나를 호출하도록)
 *          : 메서드에서 생성한 객체의 메서드만 호출
 *          : 파라미터로 받은 객체의 메서드만 호출
 *          : 필드로 참조하는 객체의 메서드만 호출
 *          예) acc.getExpDate().isAfter(now)   ->   acc.isExpired()
 */
public class Encapsulation {
}
