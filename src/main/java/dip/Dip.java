package dip;


/**
 *
 *   DEPENDENCY INVERSION PRINCIPLE(의존 역전 원칙)
 *
 *   고수준 모듈
 *      - 의미 잆는 단일 기능을 제공
 *      - 상위 수준의 정책 구현
 *
 *   저수준 모듈
 *      - 고수준 모듈의 기능을 구현하기 위해 필요한 하위 기능의 실제 구현
 *
 *   고수준 모듈, 저수준 모듈 예
 *      - 기능 예) 수정한 도면 이미지를 NAS 에 저장하고 측정 정보를 DB 테이블에 저장하고 수정 의뢰 정보를 DB 에 저장하는 기능
 *          : 고수준 - 도면 이미지를 저장하고    저수준 - NAS 에 이미지를 저장한다.
 *                  - 측정 정보를 저장하고          - MEAS_INFO 테이블에 저장한다.
 *                  - 도명 수정 의뢰를 한다.        - BP_MOD_REQ 테이블에 저장한다.
 *
 *   고수준이 저수준에 직접 의존하면
 *      - 저수준 모듈 변경 -> 고수준 모듈에 영향
 *      - 고수준 정책이 바뀌지 않았으나 저수준 구현 변경으로 코드 발생
 *
 *   DEPENDENCY INVERSION PRINCIPLE
 *      - 의존 역전 원칙
 *          : 고수준 모듈은 저수준 모듈의 구현에 의존하면 안 됨
 *          : 저수준 모듈이 고수준 모듈에서 정의한 추상타입에 의존해야 함
 *
 *   고수준 관점에서 추상화
 *      - 고수준 입장에서 저수준 모듈을 추상화
 *          : 구현 입장에서 추상화하지 말 것
 *
 *   DIP 는 유연함을 높임
 *      - 고수준 모듈의 변경을 최소화하면서 저수준 모듈의 변경 유연함을 높임
 *
 *   부단한 추상화 노력 필요
 *      - 처음부터 바로 좋은 설계가 나오지는 않음
 *          : 요구사항 / 업무 이해가 높아지면서 저수준 모듈을 인지하고 상위 수준 관점에서 저수준 모듈에 대한 추상화 시도
 *
 *   연습
 *      - 상품 번호를 이용해서 상품 DB 에서 상세 정보를 구함
 *      - 추천 엔진 Daara API 를 이용해서 추천 상품 5개 구함
 *      - 추천 상품이 5개 미만이면 같은 분류에 속한 상품에서 최근 한달 판매가 많은 상품을 구해서 5개를 채움
 *          : 고수준 - 상품 번호로 상품 상세 정보 구함
 *                  - 추천 상품 5개 구함
 *                  - 인기 상품 구함
 *            저수준 - DB 에서 상세 정보 구함
 *                  - Daara API 에서 상품 5개 구함
 *                  - 같은 분류에 속한 상품에서 최근 한 달 판매가 많은 상품 ERP 에서 구함
 */
public class Dip {
}
